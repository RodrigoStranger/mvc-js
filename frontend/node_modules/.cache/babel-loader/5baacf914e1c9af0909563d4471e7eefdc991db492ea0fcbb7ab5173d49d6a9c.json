{"ast":null,"code":"import axios from 'axios';\n\n// URL base de la API\nconst API_URL = 'http://localhost:4000/api';\nexport const libroService = {\n  // Obtiene todos los libros\n  getAll: async () => {\n    try {\n      const response = await axios.get(`${API_URL}/libros`);\n      return response.data;\n    } catch (error) {\n      console.error('Error al obtener los libros:', error);\n      throw error;\n    }\n  },\n  // Obtiene un libro por su ID\n  getById: async id => {\n    try {\n      const response = await axios.get(`${API_URL}/libros/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error al obtener el libro:', error);\n      throw error;\n    }\n  },\n  // Crea un nuevo libro\n  create: async libro => {\n    try {\n      const response = await axios.post(`${API_URL}/libros`, libro);\n      return response.data;\n    } catch (error) {\n      console.error('Error al crear el libro:', error);\n      // Si el servidor devuelve un mensaje de error, lo extraemos\n      if (error.response && error.response.data && error.response.data.message) {\n        throw new Error(error.response.data.message);\n      } else if (error.message) {\n        throw new Error(error.message);\n      } else {\n        throw new Error('Error al crear el libro');\n      }\n    }\n  },\n  // Actualiza un libro existente\n  update: async (id, libro) => {\n    try {\n      const response = await axios.put(`${API_URL}/libros/${id}`, libro);\n      return response.data;\n    } catch (error) {\n      console.error('Error al actualizar el libro:', error);\n      // Si el servidor devuelve un mensaje de error, lo extraemos\n      if (error.response && error.response.data && error.response.data.message) {\n        throw new Error(error.response.data.message);\n      } else if (error.message) {\n        throw new Error(error.message);\n      } else {\n        throw new Error('Error al actualizar el libro');\n      }\n    }\n  },\n  // Elimina un libro existente\n  delete: async id => {\n    try {\n      const response = await axios.delete(`${API_URL}/libros/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error al eliminar el libro:', error);\n      throw error;\n    }\n  }\n};\n\n// Exportar el servicio\nexport default libroService;","map":{"version":3,"names":["axios","API_URL","libroService","getAll","response","get","data","error","console","getById","id","create","libro","post","message","Error","update","put","delete"],"sources":["C:/Users/riexd/Desktop/mvc-js/frontend/src/services/libroService.js"],"sourcesContent":["import axios from 'axios';\n\n// URL base de la API\nconst API_URL = 'http://localhost:4000/api';\n\nexport const libroService = {\n\n    // Obtiene todos los libros\n    getAll: async () => {\n        try {\n            const response = await axios.get(`${API_URL}/libros`);\n            return response.data;\n        } catch (error) {\n            console.error('Error al obtener los libros:', error);\n            throw error;\n        }\n    },\n    \n    // Obtiene un libro por su ID\n    getById: async (id) => {\n        try {\n            const response = await axios.get(`${API_URL}/libros/${id}`);\n            return response.data;\n        } catch (error) {\n            console.error('Error al obtener el libro:', error);\n            throw error;\n        }\n    },\n    \n    // Crea un nuevo libro\n    create: async (libro) => {\n        try {\n            const response = await axios.post(`${API_URL}/libros`, libro);\n            return response.data;\n        } catch (error) {\n            console.error('Error al crear el libro:', error);\n            // Si el servidor devuelve un mensaje de error, lo extraemos\n            if (error.response && error.response.data && error.response.data.message) {\n                throw new Error(error.response.data.message);\n            } else if (error.message) {\n                throw new Error(error.message);\n            } else {\n                throw new Error('Error al crear el libro');\n            }\n        }\n    },\n    \n    // Actualiza un libro existente\n    update: async (id, libro) => {\n        try {\n            const response = await axios.put(`${API_URL}/libros/${id}`, libro);\n            return response.data;\n        } catch (error) {\n            console.error('Error al actualizar el libro:', error);\n            // Si el servidor devuelve un mensaje de error, lo extraemos\n            if (error.response && error.response.data && error.response.data.message) {\n                throw new Error(error.response.data.message);\n            } else if (error.message) {\n                throw new Error(error.message);\n            } else {\n                throw new Error('Error al actualizar el libro');\n            }\n        }\n    },\n    \n    // Elimina un libro existente\n    delete: async (id) => {\n        try {\n            const response = await axios.delete(`${API_URL}/libros/${id}`);\n            return response.data;\n        } catch (error) {\n            console.error('Error al eliminar el libro:', error);\n            throw error;\n        }\n    }\n};\n\n// Exportar el servicio\nexport default libroService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}